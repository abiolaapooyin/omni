"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/research";
exports.ids = ["pages/api/research"];
exports.modules = {

/***/ "(api)/./pages/api/research.js":
/*!*******************************!*\
  !*** ./pages/api/research.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_contentFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/contentFilter */ \"(api)/./utils/contentFilter.js\");\n// Next.js API route to proxy research requests and bypass CORS\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { query  } = req.body;\n    if (!query) {\n        return res.status(400).json({\n            error: \"Query is required\"\n        });\n    }\n    try {\n        console.log(\"Proxying research request for:\", query);\n        // First API call to initiate research\n        const response = await fetch(\"https://agents-mcp-hackathon-researchcopilot.hf.space/gradio_api/call/conduct_research_sync\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"User-Agent\": \"Research-Proxy/1.0\"\n            },\n            body: JSON.stringify({\n                data: [\n                    query\n                ]\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"API Error:\", response.status, errorText);\n            return res.status(response.status).json({\n                error: `API Error: ${errorText}`\n            });\n        }\n        const data = await response.json();\n        console.log(\"Initial response:\", data);\n        const eventId = data.event_id;\n        if (!eventId) {\n            console.error(\"No event ID received:\", data);\n            return res.status(500).json({\n                error: \"No event ID received from research API\"\n            });\n        }\n        // Wait a moment before polling\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        // Second API call to get results\n        const resultsUrl = `https://agents-mcp-hackathon-researchcopilot.hf.space/gradio_api/call/conduct_research_sync/${eventId}`;\n        console.log(\"Fetching results from:\", resultsUrl);\n        const resultsResponse = await fetch(resultsUrl, {\n            headers: {\n                \"User-Agent\": \"Research-Proxy/1.0\"\n            }\n        });\n        if (!resultsResponse.ok) {\n            const errorText1 = await resultsResponse.text();\n            console.error(\"Results API Error:\", resultsResponse.status, errorText1);\n            return res.status(resultsResponse.status).json({\n                error: `Results API Error: ${errorText1}`\n            });\n        }\n        // Process the streaming response\n        const reader = resultsResponse.body.getReader();\n        const decoder = new TextDecoder();\n        let result = \"\";\n        let buffer = \"\";\n        while(true){\n            const { done , value  } = await reader.read();\n            if (done) break;\n            const chunk = decoder.decode(value);\n            result += chunk;\n            buffer += chunk;\n            // Process complete lines from buffer\n            const lines = buffer.split(\"\\n\");\n            // Keep the last incomplete line in buffer\n            buffer = lines.pop() || \"\";\n            for (const line of lines){\n                if (line.startsWith(\"data: \")) {\n                    const dataContent = line.slice(6);\n                    // Skip null data\n                    if (dataContent.trim() === \"null\") {\n                        continue;\n                    }\n                    try {\n                        const jsonData = JSON.parse(dataContent);\n                        if (jsonData && Array.isArray(jsonData) && jsonData.length >= 4) {\n                            console.log(\"Research completed successfully\");\n                            console.log(\"Raw sources data:\", jsonData[1]);\n                            console.log(\"Raw citations data:\", jsonData[2]);\n                            // Helper function to ensure array format\n                            const ensureArray = (data)=>{\n                                // Helper to check if a string is a valid source (not a header or metadata)\n                                const isValidSource = (str)=>{\n                                    if (!str || typeof str !== \"string\") return false;\n                                    const trimmed = str.trim();\n                                    // Filter out headers, empty lines, and metadata\n                                    if (trimmed.startsWith(\"#\") || trimmed.startsWith(\"Sources Found\") || trimmed.length < 10 || trimmed === \"# Sources Found\" || /^\\d+\\.$/.test(trimmed)) {\n                                        return false;\n                                    }\n                                    return true;\n                                };\n                                if (Array.isArray(data)) {\n                                    // If it's already an array, check if items need parsing\n                                    return data.filter((item)=>{\n                                        if (typeof item === \"string\") {\n                                            return isValidSource(item);\n                                        }\n                                        return item && typeof item === \"object\";\n                                    }).map((item, index)=>{\n                                        if (typeof item === \"string\") {\n                                            // Parse string items into source objects\n                                            const urlMatch = item.match(/(https?:\\/\\/[^\\s]+)/);\n                                            const url = urlMatch ? urlMatch[1] : null;\n                                            const title = item.replace(/(https?:\\/\\/[^\\s]+)/, \"\").trim() || `Source ${index + 1}`;\n                                            return {\n                                                title: title || `Source ${index + 1}`,\n                                                url: url,\n                                                type: \"web\",\n                                                description: item\n                                            };\n                                        }\n                                        return item;\n                                    });\n                                }\n                                if (typeof data === \"string\") {\n                                    try {\n                                        const parsed = JSON.parse(data);\n                                        return Array.isArray(parsed) ? ensureArray(parsed) : [\n                                            data\n                                        ];\n                                    } catch  {\n                                        // Try to parse as structured source data\n                                        const lines = data.split(\"\\n\").filter((line)=>line.trim() && isValidSource(line));\n                                        return lines.map((line, index)=>{\n                                            const urlMatch = line.match(/(https?:\\/\\/[^\\s]+)/);\n                                            const url = urlMatch ? urlMatch[1] : null;\n                                            const title = line.replace(/(https?:\\/\\/[^\\s]+)/, \"\").trim() || `Source ${index + 1}`;\n                                            return {\n                                                title: title || `Source ${index + 1}`,\n                                                url: url,\n                                                type: \"web\",\n                                                description: line\n                                            };\n                                        });\n                                    }\n                                }\n                                return data ? [\n                                    data\n                                ] : [];\n                            };\n                            const researchData = {\n                                summary: jsonData[0] || \"Research completed successfully.\",\n                                sources: ensureArray(jsonData[1]),\n                                citations: ensureArray(jsonData[2]),\n                                processLog: ensureArray(jsonData[3])\n                            };\n                            // Filter content to replace 'perplexity' with 'omni'\n                            const filteredData = (0,_utils_contentFilter__WEBPACK_IMPORTED_MODULE_0__.filterResearchResults)(researchData);\n                            return res.status(200).json({\n                                success: true,\n                                data: filteredData\n                            });\n                        }\n                    } catch (e) {\n                        // For multi-line JSON, try to accumulate until we have complete JSON\n                        console.log(\"Failed to parse data line (might be incomplete):\", dataContent.substring(0, 100));\n                    }\n                }\n            }\n        }\n        // Process any remaining data in buffer\n        if (buffer.startsWith(\"data: \")) {\n            const dataContent1 = buffer.slice(6);\n            try {\n                const jsonData1 = JSON.parse(dataContent1);\n                if (jsonData1 && Array.isArray(jsonData1) && jsonData1.length >= 4) {\n                    console.log(\"Research completed successfully (from buffer)\");\n                    // Helper function to ensure array format\n                    const ensureArray1 = (data)=>{\n                        // Helper to check if a string is a valid source (not a header or metadata)\n                        const isValidSource = (str)=>{\n                            if (!str || typeof str !== \"string\") return false;\n                            const trimmed = str.trim();\n                            // Filter out headers, empty lines, and metadata\n                            if (trimmed.startsWith(\"#\") || trimmed.startsWith(\"Sources Found\") || trimmed.length < 10 || trimmed === \"# Sources Found\" || /^\\d+\\.$/.test(trimmed)) {\n                                return false;\n                            }\n                            return true;\n                        };\n                        if (Array.isArray(data)) {\n                            // If it's already an array, check if items need parsing\n                            return data.filter((item)=>{\n                                if (typeof item === \"string\") {\n                                    return isValidSource(item);\n                                }\n                                return item && typeof item === \"object\";\n                            }).map((item, index)=>{\n                                if (typeof item === \"string\") {\n                                    // Parse string items into source objects\n                                    const urlMatch = item.match(/(https?:\\/\\/[^\\s]+)/);\n                                    const url = urlMatch ? urlMatch[1] : null;\n                                    const title = item.replace(/(https?:\\/\\/[^\\s]+)/, \"\").trim() || `Source ${index + 1}`;\n                                    return {\n                                        title: title || `Source ${index + 1}`,\n                                        url: url,\n                                        type: \"web\",\n                                        description: item\n                                    };\n                                }\n                                return item;\n                            });\n                        }\n                        if (typeof data === \"string\") {\n                            try {\n                                const parsed = JSON.parse(data);\n                                return Array.isArray(parsed) ? ensureArray1(parsed) : [\n                                    data\n                                ];\n                            } catch  {\n                                // Try to parse as structured source data\n                                const lines = data.split(\"\\n\").filter((line)=>line.trim() && isValidSource(line));\n                                return lines.map((line, index)=>{\n                                    const urlMatch = line.match(/(https?:\\/\\/[^\\s]+)/);\n                                    const url = urlMatch ? urlMatch[1] : null;\n                                    const title = line.replace(/(https?:\\/\\/[^\\s]+)/, \"\").trim() || `Source ${index + 1}`;\n                                    return {\n                                        title: title || `Source ${index + 1}`,\n                                        url: url,\n                                        type: \"web\",\n                                        description: line\n                                    };\n                                });\n                            }\n                        }\n                        return data ? [\n                            data\n                        ] : [];\n                    };\n                    const researchData1 = {\n                        summary: jsonData1[0] || \"Research completed successfully.\",\n                        sources: ensureArray1(jsonData1[1]),\n                        citations: ensureArray1(jsonData1[2]),\n                        processLog: ensureArray1(jsonData1[3])\n                    };\n                    // Filter content to replace 'perplexity' with 'omni'\n                    const filteredData1 = (0,_utils_contentFilter__WEBPACK_IMPORTED_MODULE_0__.filterResearchResults)(researchData1);\n                    return res.status(200).json({\n                        success: true,\n                        data: filteredData1\n                    });\n                }\n            } catch (e1) {\n                console.log(\"Failed to parse final buffer data\");\n            }\n        }\n        // Try to extract data from the complete result as fallback\n        const dataMatch = result.match(/data: (\\[.*\\])/s);\n        if (dataMatch) {\n            try {\n                const jsonData2 = JSON.parse(dataMatch[1]);\n                if (jsonData2 && Array.isArray(jsonData2) && jsonData2.length >= 4) {\n                    console.log(\"Research completed successfully (from regex match)\");\n                    // Helper function to ensure array format\n                    const ensureArray2 = (data)=>{\n                        // Helper to check if a string is a valid source (not a header or metadata)\n                        const isValidSource = (str)=>{\n                            if (!str || typeof str !== \"string\") return false;\n                            const trimmed = str.trim();\n                            // Filter out headers, empty lines, and metadata\n                            if (trimmed.startsWith(\"#\") || trimmed.startsWith(\"Sources Found\") || trimmed.length < 10 || trimmed === \"# Sources Found\" || /^\\d+\\.$/.test(trimmed)) {\n                                return false;\n                            }\n                            return true;\n                        };\n                        if (Array.isArray(data)) {\n                            return data.filter((item)=>{\n                                if (typeof item === \"string\") {\n                                    return isValidSource(item);\n                                }\n                                return item && typeof item === \"object\";\n                            }).map((item, index)=>{\n                                if (typeof item === \"string\") {\n                                    // Parse string items into source objects\n                                    const urlMatch = item.match(/(https?:\\/\\/[^\\s]+)/);\n                                    const url = urlMatch ? urlMatch[1] : null;\n                                    const title = item.replace(/(https?:\\/\\/[^\\s]+)/, \"\").trim() || `Source ${index + 1}`;\n                                    return {\n                                        title: title || `Source ${index + 1}`,\n                                        url: url,\n                                        type: \"web\",\n                                        description: item\n                                    };\n                                }\n                                return item;\n                            });\n                        }\n                        if (typeof data === \"string\") {\n                            try {\n                                const parsed = JSON.parse(data);\n                                return Array.isArray(parsed) ? ensureArray2(parsed) : [\n                                    data\n                                ];\n                            } catch  {\n                                // Try to parse as structured source data\n                                const lines = data.split(\"\\n\").filter((line)=>line.trim() && isValidSource(line));\n                                return lines.map((line, index)=>{\n                                    const urlMatch = line.match(/(https?:\\/\\/[^\\s]+)/);\n                                    const url = urlMatch ? urlMatch[1] : null;\n                                    const title = line.replace(/(https?:\\/\\/[^\\s]+)/, \"\").trim() || `Source ${index + 1}`;\n                                    return {\n                                        title: title || `Source ${index + 1}`,\n                                        url: url,\n                                        type: \"web\",\n                                        description: line\n                                    };\n                                });\n                            }\n                        }\n                        return data ? [\n                            data\n                        ] : [];\n                    };\n                    const researchData2 = {\n                        summary: jsonData2[0] || \"Research completed successfully.\",\n                        sources: ensureArray2(jsonData2[1]),\n                        citations: ensureArray2(jsonData2[2]),\n                        processLog: ensureArray2(jsonData2[3])\n                    };\n                    // Filter content to replace 'perplexity' with 'omni'\n                    const filteredData2 = (0,_utils_contentFilter__WEBPACK_IMPORTED_MODULE_0__.filterResearchResults)(researchData2);\n                    return res.status(200).json({\n                        success: true,\n                        data: filteredData2\n                    });\n                }\n            } catch (e2) {\n                console.log(\"Failed to parse regex matched data\");\n            }\n        }\n        // If we get here, no valid data was found\n        console.error(\"No valid research data found in response\");\n        return res.status(500).json({\n            error: \"No research data received from API\",\n            debug: result.substring(0, 500) // First 500 chars for debugging\n        });\n    } catch (error) {\n        console.error(\"Proxy error:\", error);\n        return res.status(500).json({\n            error: \"Internal server error: \" + error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/research.js\n");

/***/ }),

/***/ "(api)/./utils/contentFilter.js":
/*!********************************!*\
  !*** ./utils/contentFilter.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"filterContentRecursively\": () => (/* binding */ filterContentRecursively),\n/* harmony export */   \"filterResearchResults\": () => (/* binding */ filterResearchResults),\n/* harmony export */   \"replacePerplexityWithOmni\": () => (/* binding */ replacePerplexityWithOmni)\n/* harmony export */ });\n/**\n * Content filtering utility to replace brand mentions\n * Replaces any mention of 'perplexity' with 'omni' (case-insensitive)\n */ /**\n * Replace 'perplexity' with 'omni' in text content\n * @param {string} text - The text to filter\n * @returns {string} - The filtered text\n */ function replacePerplexityWithOmni(text) {\n    if (typeof text !== \"string\") {\n        return text;\n    }\n    // Replace all variations of 'perplexity' with 'omni'\n    return text.replace(/perplexity/gi, \"omni\").replace(/Perplexity/g, \"Omni\");\n}\n/**\n * Filter content in objects recursively\n * @param {any} obj - The object to filter\n * @returns {any} - The filtered object\n */ function filterContentRecursively(obj) {\n    if (typeof obj === \"string\") {\n        return replacePerplexityWithOmni(obj);\n    }\n    if (Array.isArray(obj)) {\n        return obj.map((item)=>filterContentRecursively(item));\n    }\n    if (obj && typeof obj === \"object\") {\n        const filtered = {};\n        for (const [key, value] of Object.entries(obj)){\n            filtered[key] = filterContentRecursively(value);\n        }\n        return filtered;\n    }\n    return obj;\n}\n/**\n * Filter research results data\n * @param {object} researchData - The research results object\n * @returns {object} - The filtered research results\n */ function filterResearchResults(researchData) {\n    if (!researchData) return researchData;\n    return filterContentRecursively(researchData);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9jb250ZW50RmlsdGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Q0FHQyxHQUVEOzs7O0NBSUMsR0FDTSxTQUFTQSx5QkFBeUIsQ0FBQ0MsSUFBSSxFQUFFO0lBQzlDLElBQUksT0FBT0EsSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPQSxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQscURBQXFEO0lBQ3JELE9BQU9BLElBQUksQ0FDUkMsT0FBTyxpQkFBaUIsTUFBTSxDQUFDLENBQy9CQSxPQUFPLGdCQUFnQixNQUFNLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNNLFNBQVNDLHdCQUF3QixDQUFDQyxHQUFHLEVBQUU7SUFDNUMsSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzNCLE9BQU9KLHlCQUF5QixDQUFDSSxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBSUMsS0FBSyxDQUFDQyxPQUFPLENBQUNGLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLE9BQU9BLEdBQUcsQ0FBQ0csR0FBRyxDQUFDQyxDQUFBQSxJQUFJLEdBQUlMLHdCQUF3QixDQUFDSyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFJSixHQUFHLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUNsQyxNQUFNSyxRQUFRLEdBQUcsRUFBRTtRQUNuQixLQUFLLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLENBQUMsSUFBSUMsTUFBTSxDQUFDQyxPQUFPLENBQUNULEdBQUcsQ0FBQyxDQUFFO1lBQzlDSyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxHQUFHUCx3QkFBd0IsQ0FBQ1EsS0FBSyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUNELE9BQU9GLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsT0FBT0wsR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVEOzs7O0NBSUMsR0FDTSxTQUFTVSxxQkFBcUIsQ0FBQ0MsWUFBWSxFQUFFO0lBQ2xELElBQUksQ0FBQ0EsWUFBWSxFQUFFLE9BQU9BLFlBQVksQ0FBQztJQUV2QyxPQUFPWix3QkFBd0IsQ0FBQ1ksWUFBWSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL29tbmktYWktaW50ZXJmYWNlLy4vdXRpbHMvY29udGVudEZpbHRlci5qcz9hNDA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udGVudCBmaWx0ZXJpbmcgdXRpbGl0eSB0byByZXBsYWNlIGJyYW5kIG1lbnRpb25zXG4gKiBSZXBsYWNlcyBhbnkgbWVudGlvbiBvZiAncGVycGxleGl0eScgd2l0aCAnb21uaScgKGNhc2UtaW5zZW5zaXRpdmUpXG4gKi9cblxuLyoqXG4gKiBSZXBsYWNlICdwZXJwbGV4aXR5JyB3aXRoICdvbW5pJyBpbiB0ZXh0IGNvbnRlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHRleHQgdG8gZmlsdGVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSBmaWx0ZXJlZCB0ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlUGVycGxleGl0eVdpdGhPbW5pKHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG4gIFxuICAvLyBSZXBsYWNlIGFsbCB2YXJpYXRpb25zIG9mICdwZXJwbGV4aXR5JyB3aXRoICdvbW5pJ1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9wZXJwbGV4aXR5L2dpLCAnb21uaScpXG4gICAgLnJlcGxhY2UoL1BlcnBsZXhpdHkvZywgJ09tbmknKTtcbn1cblxuLyoqXG4gKiBGaWx0ZXIgY29udGVudCBpbiBvYmplY3RzIHJlY3Vyc2l2ZWx5XG4gKiBAcGFyYW0ge2FueX0gb2JqIC0gVGhlIG9iamVjdCB0byBmaWx0ZXJcbiAqIEByZXR1cm5zIHthbnl9IC0gVGhlIGZpbHRlcmVkIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyQ29udGVudFJlY3Vyc2l2ZWx5KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcmVwbGFjZVBlcnBsZXhpdHlXaXRoT21uaShvYmopO1xuICB9XG4gIFxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAoaXRlbSA9PiBmaWx0ZXJDb250ZW50UmVjdXJzaXZlbHkoaXRlbSkpO1xuICB9XG4gIFxuICBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7XG4gICAgICBmaWx0ZXJlZFtrZXldID0gZmlsdGVyQ29udGVudFJlY3Vyc2l2ZWx5KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkO1xuICB9XG4gIFxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEZpbHRlciByZXNlYXJjaCByZXN1bHRzIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNlYXJjaERhdGEgLSBUaGUgcmVzZWFyY2ggcmVzdWx0cyBvYmplY3RcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gVGhlIGZpbHRlcmVkIHJlc2VhcmNoIHJlc3VsdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclJlc2VhcmNoUmVzdWx0cyhyZXNlYXJjaERhdGEpIHtcbiAgaWYgKCFyZXNlYXJjaERhdGEpIHJldHVybiByZXNlYXJjaERhdGE7XG4gIFxuICByZXR1cm4gZmlsdGVyQ29udGVudFJlY3Vyc2l2ZWx5KHJlc2VhcmNoRGF0YSk7XG59Il0sIm5hbWVzIjpbInJlcGxhY2VQZXJwbGV4aXR5V2l0aE9tbmkiLCJ0ZXh0IiwicmVwbGFjZSIsImZpbHRlckNvbnRlbnRSZWN1cnNpdmVseSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJmaWx0ZXJlZCIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImZpbHRlclJlc2VhcmNoUmVzdWx0cyIsInJlc2VhcmNoRGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./utils/contentFilter.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/research.js"));
module.exports = __webpack_exports__;

})();